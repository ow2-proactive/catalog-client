/*
 * CatalogObjectEntity Catalog API
 * The purpose of the catalog is to store ProActive objects.  A catalog is subdivided into buckets.   Each bucket manages zero, one or more versioned ProActive objects.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.ow2.proactive.catalog.client.api;

import com.sun.jersey.api.client.GenericType;

import org.ow2.proactive.catalog.client.ApiException;
import org.ow2.proactive.catalog.client.ApiClient;
import org.ow2.proactive.catalog.client.Configuration;
import org.ow2.proactive.catalog.client.model.*;
import org.ow2.proactive.catalog.client.Pair;

import org.ow2.proactive.catalog.client.model.AllBucketGrants;
import org.ow2.proactive.catalog.client.model.BucketGrantMetadata;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-26T17:28:06.013+01:00")
public class BucketGrantControllerApi {
  private ApiClient apiClient;

  public BucketGrantControllerApi() {
    this(Configuration.getDefaultApiClient());
  }

  public BucketGrantControllerApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Create a new user group grant access for a bucket
   * 
   * @param sessionID The session id used to access ProActive REST server (required)
   * @param bucketName The name of the bucket where the catalog objects are stored. (required)
   * @param accessType The type of the access grant. It can be either noAccess, read, write or admin. (required)
   * @param priority The new priority of the access grant. It can be a value from 1 (lowest) to 10 (highest), with 5 as default. Priorities are used to compute the final access rights of a user belonging to multiple groups. Group grants with the same priority will resolve with the default accessType order (admin &gt; write &gt; read &gt; noAccess). Finally, please note that a user grant has always more priority than a group grant. (required)
   * @param userGroup The name of the group of users that will benefit of the access grant. (required)
   * @return BucketGrantMetadata
   * @throws ApiException if fails to make API call
   */
  public BucketGrantMetadata createBucketGrantForAGroupUsingPOST(String sessionID, String bucketName, String accessType, Integer priority, String userGroup) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sessionID' is set
    if (sessionID == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionID' when calling createBucketGrantForAGroupUsingPOST");
    }
    
    // verify the required parameter 'bucketName' is set
    if (bucketName == null) {
      throw new ApiException(400, "Missing the required parameter 'bucketName' when calling createBucketGrantForAGroupUsingPOST");
    }
    
    // verify the required parameter 'accessType' is set
    if (accessType == null) {
      throw new ApiException(400, "Missing the required parameter 'accessType' when calling createBucketGrantForAGroupUsingPOST");
    }
    
    // verify the required parameter 'priority' is set
    if (priority == null) {
      throw new ApiException(400, "Missing the required parameter 'priority' when calling createBucketGrantForAGroupUsingPOST");
    }
    
    // verify the required parameter 'userGroup' is set
    if (userGroup == null) {
      throw new ApiException(400, "Missing the required parameter 'userGroup' when calling createBucketGrantForAGroupUsingPOST");
    }
    
    // create path and map variables
    String localVarPath = "/buckets/{bucketName}/grant/group"
      .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("accessType", accessType));
    localVarQueryParams.addAll(apiClient.parameterToPair("priority", priority));
    localVarQueryParams.addAll(apiClient.parameterToPair("userGroup", userGroup));

    if (sessionID != null)
      localVarHeaderParams.put("sessionID", apiClient.parameterToString(sessionID));

    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<BucketGrantMetadata> localVarReturnType = new GenericType<BucketGrantMetadata>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Create a new user grant access for a bucket
   * 
   * @param sessionID The the session id used to access ProActive REST server (required)
   * @param bucketName The name of the bucket where the catalog objects are stored. (required)
   * @param accessType The type of the access grant. It can be either noAccess, read, write or admin. (required)
   * @param username The name of the user that will benefit of the access grant. (required)
   * @return BucketGrantMetadata
   * @throws ApiException if fails to make API call
   */
  public BucketGrantMetadata createBucketGrantForAUserUsingPOST(String sessionID, String bucketName, String accessType, String username) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sessionID' is set
    if (sessionID == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionID' when calling createBucketGrantForAUserUsingPOST");
    }
    
    // verify the required parameter 'bucketName' is set
    if (bucketName == null) {
      throw new ApiException(400, "Missing the required parameter 'bucketName' when calling createBucketGrantForAUserUsingPOST");
    }
    
    // verify the required parameter 'accessType' is set
    if (accessType == null) {
      throw new ApiException(400, "Missing the required parameter 'accessType' when calling createBucketGrantForAUserUsingPOST");
    }
    
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling createBucketGrantForAUserUsingPOST");
    }
    
    // create path and map variables
    String localVarPath = "/buckets/{bucketName}/grant/user"
      .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("accessType", accessType));
    localVarQueryParams.addAll(apiClient.parameterToPair("username", username));

    if (sessionID != null)
      localVarHeaderParams.put("sessionID", apiClient.parameterToString(sessionID));

    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<BucketGrantMetadata> localVarReturnType = new GenericType<BucketGrantMetadata>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete all grants assigned to a bucket
   * 
   * @param sessionID The session id used to access ProActive REST server. (required)
   * @param bucketName The name of the bucket where the catalog objects are stored. (required)
   * @return List&lt;BucketGrantMetadata&gt;
   * @throws ApiException if fails to make API call
   */
  public List<BucketGrantMetadata> deleteAllBucketGrantsAssignedToABucketUsingDELETE(String sessionID, String bucketName) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sessionID' is set
    if (sessionID == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionID' when calling deleteAllBucketGrantsAssignedToABucketUsingDELETE");
    }
    
    // verify the required parameter 'bucketName' is set
    if (bucketName == null) {
      throw new ApiException(400, "Missing the required parameter 'bucketName' when calling deleteAllBucketGrantsAssignedToABucketUsingDELETE");
    }
    
    // create path and map variables
    String localVarPath = "/buckets/{bucketName}/grant"
      .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (sessionID != null)
      localVarHeaderParams.put("sessionID", apiClient.parameterToString(sessionID));

    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<List<BucketGrantMetadata>> localVarReturnType = new GenericType<List<BucketGrantMetadata>>() {};
    return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete all grants associated with a bucket and all objects contained in this bucket
   * 
   * @param sessionID The session id used to access ProActive REST server. (required)
   * @param bucketName The name of the bucket where the catalog objects are stored. (required)
   * @return AllBucketGrants
   * @throws ApiException if fails to make API call
   */
  public AllBucketGrants deleteAllGrantsForABucketAndItsObjectsUsingDELETE(String sessionID, String bucketName) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sessionID' is set
    if (sessionID == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionID' when calling deleteAllGrantsForABucketAndItsObjectsUsingDELETE");
    }
    
    // verify the required parameter 'bucketName' is set
    if (bucketName == null) {
      throw new ApiException(400, "Missing the required parameter 'bucketName' when calling deleteAllGrantsForABucketAndItsObjectsUsingDELETE");
    }
    
    // create path and map variables
    String localVarPath = "/buckets/{bucketName}/grant/all"
      .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (sessionID != null)
      localVarHeaderParams.put("sessionID", apiClient.parameterToString(sessionID));

    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<AllBucketGrants> localVarReturnType = new GenericType<AllBucketGrants>() {};
    return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete a group grant access for a bucket
   * 
   * @param sessionID The session id used to access ProActive REST server. (required)
   * @param bucketName The name of the bucket where the catalog objects are stored. (required)
   * @param userGroup The name of the group of users that are benefiting from the access grant. (required)
   * @return BucketGrantMetadata
   * @throws ApiException if fails to make API call
   */
  public BucketGrantMetadata deleteBucketGrantForAGroupUsingDELETE(String sessionID, String bucketName, String userGroup) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sessionID' is set
    if (sessionID == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionID' when calling deleteBucketGrantForAGroupUsingDELETE");
    }
    
    // verify the required parameter 'bucketName' is set
    if (bucketName == null) {
      throw new ApiException(400, "Missing the required parameter 'bucketName' when calling deleteBucketGrantForAGroupUsingDELETE");
    }
    
    // verify the required parameter 'userGroup' is set
    if (userGroup == null) {
      throw new ApiException(400, "Missing the required parameter 'userGroup' when calling deleteBucketGrantForAGroupUsingDELETE");
    }
    
    // create path and map variables
    String localVarPath = "/buckets/{bucketName}/grant/group"
      .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("userGroup", userGroup));

    if (sessionID != null)
      localVarHeaderParams.put("sessionID", apiClient.parameterToString(sessionID));

    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<BucketGrantMetadata> localVarReturnType = new GenericType<BucketGrantMetadata>() {};
    return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Delete a user grant access for a bucket
   * 
   * @param sessionID The session id used to access ProActive REST server. (required)
   * @param bucketName The name of the bucket where the catalog objects are stored. (required)
   * @param username The name of the user that is benefiting from the access grant. (required)
   * @return BucketGrantMetadata
   * @throws ApiException if fails to make API call
   */
  public BucketGrantMetadata deleteBucketGrantForAUserUsingDELETE(String sessionID, String bucketName, String username) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sessionID' is set
    if (sessionID == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionID' when calling deleteBucketGrantForAUserUsingDELETE");
    }
    
    // verify the required parameter 'bucketName' is set
    if (bucketName == null) {
      throw new ApiException(400, "Missing the required parameter 'bucketName' when calling deleteBucketGrantForAUserUsingDELETE");
    }
    
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling deleteBucketGrantForAUserUsingDELETE");
    }
    
    // create path and map variables
    String localVarPath = "/buckets/{bucketName}/grant/user"
      .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("username", username));

    if (sessionID != null)
      localVarHeaderParams.put("sessionID", apiClient.parameterToString(sessionID));

    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<BucketGrantMetadata> localVarReturnType = new GenericType<BucketGrantMetadata>() {};
    return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get all grants associated with a bucket and all objects contained in this bucket
   * 
   * @param sessionID The session id used to access ProActive REST server. (required)
   * @param bucketName The name of the bucket where the catalog objects are stored. (required)
   * @return AllBucketGrants
   * @throws ApiException if fails to make API call
   */
  public AllBucketGrants getAllGrantsForABucketAndItsObjectsUsingGET(String sessionID, String bucketName) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sessionID' is set
    if (sessionID == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionID' when calling getAllGrantsForABucketAndItsObjectsUsingGET");
    }
    
    // verify the required parameter 'bucketName' is set
    if (bucketName == null) {
      throw new ApiException(400, "Missing the required parameter 'bucketName' when calling getAllGrantsForABucketAndItsObjectsUsingGET");
    }
    
    // create path and map variables
    String localVarPath = "/buckets/{bucketName}/grant/all"
      .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (sessionID != null)
      localVarHeaderParams.put("sessionID", apiClient.parameterToString(sessionID));

    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<AllBucketGrants> localVarReturnType = new GenericType<AllBucketGrants>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get all grants associated with a bucket
   * 
   * @param sessionID The session id used to access ProActive REST server. (required)
   * @param bucketName The name of the bucket where the catalog objects are stored. (required)
   * @return List&lt;BucketGrantMetadata&gt;
   * @throws ApiException if fails to make API call
   */
  public List<BucketGrantMetadata> getAllGrantsForABucketUsingGET(String sessionID, String bucketName) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sessionID' is set
    if (sessionID == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionID' when calling getAllGrantsForABucketUsingGET");
    }
    
    // verify the required parameter 'bucketName' is set
    if (bucketName == null) {
      throw new ApiException(400, "Missing the required parameter 'bucketName' when calling getAllGrantsForABucketUsingGET");
    }
    
    // create path and map variables
    String localVarPath = "/buckets/{bucketName}/grant"
      .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (sessionID != null)
      localVarHeaderParams.put("sessionID", apiClient.parameterToString(sessionID));

    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<List<BucketGrantMetadata>> localVarReturnType = new GenericType<List<BucketGrantMetadata>>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Update the access type of an existing group bucket grant
   * 
   * @param sessionID The session id used to access ProActive REST server. (required)
   * @param bucketName The name of the bucket where the catalog objects are stored. (required)
   * @param userGroup The name of the group of users that are benefiting from the access grant. (required)
   * @param accessType The new type of the access grant. It can be either noAccess, read, write or admin. (required)
   * @param priority The new priority of the access grant. It can be a value from 1 (lowest) to 10 (highest), with 5 as default. Priorities are used to compute the final access rights of a user belonging to multiple groups. Group grants with the same priority will resolve with the default accessType order (admin &gt; write &gt; read &gt; noAccess). Finally, please note that a user grant has always more priority than a group grant. (required)
   * @return BucketGrantMetadata
   * @throws ApiException if fails to make API call
   */
  public BucketGrantMetadata updateBucketGrantForAGroupUsingPUT(String sessionID, String bucketName, String userGroup, String accessType, Integer priority) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sessionID' is set
    if (sessionID == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionID' when calling updateBucketGrantForAGroupUsingPUT");
    }
    
    // verify the required parameter 'bucketName' is set
    if (bucketName == null) {
      throw new ApiException(400, "Missing the required parameter 'bucketName' when calling updateBucketGrantForAGroupUsingPUT");
    }
    
    // verify the required parameter 'userGroup' is set
    if (userGroup == null) {
      throw new ApiException(400, "Missing the required parameter 'userGroup' when calling updateBucketGrantForAGroupUsingPUT");
    }
    
    // verify the required parameter 'accessType' is set
    if (accessType == null) {
      throw new ApiException(400, "Missing the required parameter 'accessType' when calling updateBucketGrantForAGroupUsingPUT");
    }
    
    // verify the required parameter 'priority' is set
    if (priority == null) {
      throw new ApiException(400, "Missing the required parameter 'priority' when calling updateBucketGrantForAGroupUsingPUT");
    }
    
    // create path and map variables
    String localVarPath = "/buckets/{bucketName}/grant/group"
      .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("userGroup", userGroup));
    localVarQueryParams.addAll(apiClient.parameterToPair("accessType", accessType));
    localVarQueryParams.addAll(apiClient.parameterToPair("priority", priority));

    if (sessionID != null)
      localVarHeaderParams.put("sessionID", apiClient.parameterToString(sessionID));

    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<BucketGrantMetadata> localVarReturnType = new GenericType<BucketGrantMetadata>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Update the access type of an existing user bucket grant
   * 
   * @param sessionID The session id used to access ProActive REST server. (required)
   * @param bucketName The name of the bucket where the catalog objects are stored. (required)
   * @param username The name of the user that is benefiting from the access grant. (required)
   * @param accessType The new type of the access grant. It can be either noAccess, read, write or admin. (required)
   * @return BucketGrantMetadata
   * @throws ApiException if fails to make API call
   */
  public BucketGrantMetadata updateBucketGrantForAUserUsingPUT(String sessionID, String bucketName, String username, String accessType) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sessionID' is set
    if (sessionID == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionID' when calling updateBucketGrantForAUserUsingPUT");
    }
    
    // verify the required parameter 'bucketName' is set
    if (bucketName == null) {
      throw new ApiException(400, "Missing the required parameter 'bucketName' when calling updateBucketGrantForAUserUsingPUT");
    }
    
    // verify the required parameter 'username' is set
    if (username == null) {
      throw new ApiException(400, "Missing the required parameter 'username' when calling updateBucketGrantForAUserUsingPUT");
    }
    
    // verify the required parameter 'accessType' is set
    if (accessType == null) {
      throw new ApiException(400, "Missing the required parameter 'accessType' when calling updateBucketGrantForAUserUsingPUT");
    }
    
    // create path and map variables
    String localVarPath = "/buckets/{bucketName}/grant/user"
      .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
    localVarQueryParams.addAll(apiClient.parameterToPair("accessType", accessType));

    if (sessionID != null)
      localVarHeaderParams.put("sessionID", apiClient.parameterToString(sessionID));

    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<BucketGrantMetadata> localVarReturnType = new GenericType<BucketGrantMetadata>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
