/*
 * CatalogObjectEntity Catalog API
 * The purpose of the catalog is to store ProActive objects.  A catalog is subdivided into buckets.   Each bucket manages zero, one or more versioned ProActive objects.
 *
 * The version of the OpenAPI document: 1.0\"
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ow2.proactive.catalog.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.ow2.proactive.catalog.client.model.DependsOnCatalogObject;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.ow2.proactive.catalog.client.JSON;


/**
 * CatalogObjectDependencies
 */
@JsonPropertyOrder({
  CatalogObjectDependencies.JSON_PROPERTY_DEPENDS_ON,
  CatalogObjectDependencies.JSON_PROPERTY_CALLED_BY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-12T10:49:33.729424-05:00[America/New_York]")
public class CatalogObjectDependencies {
  public static final String JSON_PROPERTY_DEPENDS_ON = "depends_on";
  private List<DependsOnCatalogObject> dependsOn;

  public static final String JSON_PROPERTY_CALLED_BY = "called_by";
  private List<String> calledBy;

  public CatalogObjectDependencies() { 
  }

  public CatalogObjectDependencies dependsOn(List<DependsOnCatalogObject> dependsOn) {
    this.dependsOn = dependsOn;
    return this;
  }

  public CatalogObjectDependencies addDependsOnItem(DependsOnCatalogObject dependsOnItem) {
    if (this.dependsOn == null) {
      this.dependsOn = new ArrayList<>();
    }
    this.dependsOn.add(dependsOnItem);
    return this;
  }

   /**
   * Get dependsOn
   * @return dependsOn
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEPENDS_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DependsOnCatalogObject> getDependsOn() {
    return dependsOn;
  }


  @JsonProperty(JSON_PROPERTY_DEPENDS_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDependsOn(List<DependsOnCatalogObject> dependsOn) {
    this.dependsOn = dependsOn;
  }


  public CatalogObjectDependencies calledBy(List<String> calledBy) {
    this.calledBy = calledBy;
    return this;
  }

  public CatalogObjectDependencies addCalledByItem(String calledByItem) {
    if (this.calledBy == null) {
      this.calledBy = new ArrayList<>();
    }
    this.calledBy.add(calledByItem);
    return this;
  }

   /**
   * Get calledBy
   * @return calledBy
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CALLED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getCalledBy() {
    return calledBy;
  }


  @JsonProperty(JSON_PROPERTY_CALLED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCalledBy(List<String> calledBy) {
    this.calledBy = calledBy;
  }


  /**
   * Return true if this CatalogObjectDependencies object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogObjectDependencies catalogObjectDependencies = (CatalogObjectDependencies) o;
    return Objects.equals(this.dependsOn, catalogObjectDependencies.dependsOn) &&
        Objects.equals(this.calledBy, catalogObjectDependencies.calledBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dependsOn, calledBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogObjectDependencies {\n");
    sb.append("    dependsOn: ").append(toIndentedString(dependsOn)).append("\n");
    sb.append("    calledBy: ").append(toIndentedString(calledBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

