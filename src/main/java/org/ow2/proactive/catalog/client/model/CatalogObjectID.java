/*
 * CatalogObjectEntity Catalog API
 * The purpose of the catalog is to store ProActive objects.  A catalog is subdivided into buckets.   Each bucket manages zero, one or more versioned ProActive objects.
 *
 * The version of the OpenAPI document: 1.0\"
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ow2.proactive.catalog.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.ow2.proactive.catalog.client.model.Link;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.ow2.proactive.catalog.client.JSON;


/**
 * CatalogObjectID
 */
@JsonPropertyOrder({
  CatalogObjectID.JSON_PROPERTY_BUCKET_ID,
  CatalogObjectID.JSON_PROPERTY_CATALOG_OBJECT_NAME,
  CatalogObjectID.JSON_PROPERTY_LINKS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-27T12:13:03.112691600+01:00[Europe/Berlin]")
public class CatalogObjectID {
  public static final String JSON_PROPERTY_BUCKET_ID = "bucketId";
  private Long bucketId;

  public static final String JSON_PROPERTY_CATALOG_OBJECT_NAME = "catalogObjectName";
  private String catalogObjectName;

  public static final String JSON_PROPERTY_LINKS = "links";
  private List<Link> links;

  public CatalogObjectID() { 
  }

  public CatalogObjectID bucketId(Long bucketId) {
    this.bucketId = bucketId;
    return this;
  }

   /**
   * Get bucketId
   * @return bucketId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUCKET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getBucketId() {
    return bucketId;
  }


  @JsonProperty(JSON_PROPERTY_BUCKET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBucketId(Long bucketId) {
    this.bucketId = bucketId;
  }


  public CatalogObjectID catalogObjectName(String catalogObjectName) {
    this.catalogObjectName = catalogObjectName;
    return this;
  }

   /**
   * Get catalogObjectName
   * @return catalogObjectName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATALOG_OBJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCatalogObjectName() {
    return catalogObjectName;
  }


  @JsonProperty(JSON_PROPERTY_CATALOG_OBJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCatalogObjectName(String catalogObjectName) {
    this.catalogObjectName = catalogObjectName;
  }


  public CatalogObjectID links(List<Link> links) {
    this.links = links;
    return this;
  }

  public CatalogObjectID addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Link> getLinks() {
    return links;
  }


  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinks(List<Link> links) {
    this.links = links;
  }


  /**
   * Return true if this CatalogObjectID object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogObjectID catalogObjectID = (CatalogObjectID) o;
    return Objects.equals(this.bucketId, catalogObjectID.bucketId) &&
        Objects.equals(this.catalogObjectName, catalogObjectID.catalogObjectName) &&
        Objects.equals(this.links, catalogObjectID.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketId, catalogObjectName, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogObjectID {\n");
    sb.append("    bucketId: ").append(toIndentedString(bucketId)).append("\n");
    sb.append("    catalogObjectName: ").append(toIndentedString(catalogObjectName)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

